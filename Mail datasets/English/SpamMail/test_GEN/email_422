<message><date> thu, 29 may 2003 13:43:04 +0100 (bst) </date><from> ac.uk </from><to> ac.uk </to><subject><text_normal> ^ re :  um arrays </text_normal></subject><content-type> text/plain; charset=us-ascii </content-type><message_body><text_normal> ^ hi  ame , ^ here 's a little test prog i put together that shows a fairly easy way of using  um arrays : ^ @test ; ^ $ size_x_axis  um ; $ size_y_axis  um ; ^ $ test [  ame [  um ]  um ; $ test [  ame [  um ]  um ; $ test [  ame [  um ]  um ; $ test [  ame [  um ]  um ; ^ for ( $ x0 ; $  har ( $ size_x_axis ; $ x++ ) { for ( $ y0 ; $  har ( $ size_y_axis ; $ y++ ) { print $ test [ $ x] [ $  har ] . ^ '  har ' ; ^ output : ^  um  um  um  um ^  um hashes are also very easy to use , in a similar way . ^ the only funny thing about this is you only specify the size of the  har and  har axes for the purposes of looping - the actual arrays are allocated dynamically and implicitly by perl . ^ later , ^  har </text_normal><text_embedded> ^ hi  ame , ^ i 'm supposed to meet  ame this afternoon so i 'll be at the  ame ^ i put something together as an attempt to implement the algorithm . ^ could you have a look when you are free . ^ i 'm not at all certain how to give a  um array ^ is there a way i could just use a  har like notation  ame [ x] [  har ] - there was a suggestion on the web about a hash . ^ undef %hash ^ $ hash [ $ x, $ y } ^ is hash a reserved word or just %statearray ? ^ do you know whether it will work ? ^ see you soon ,  ame . </text_embedded></message_body></message>