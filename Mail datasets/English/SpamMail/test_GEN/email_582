<message><date> fri, 6 jun 2003 17:17:30 -0300 (adt) </date><from> dal.ca </from><to> uib.no </to><subject><text_normal> ^ [  ame ]  ame  ame package in  ame </text_normal></subject><content-type> text/plain; charset=x-unknown </content-type><message_body><text_normal> ^  ame : :  ame - a new  ame package for n-gram analysis , is made available at the site : ^  ebsite ^ and it will be soon be indexed by  ame (  ebsite ^ it is a small and flexible piece of code that comes with a script ngrams.pl for direct processing of files . ^ i am aware that this is yet another ' n-gram package , but it is novel in some ways . ^ references to other packages are included . ^ the man pages for the script and the module are included below . ^  ame ^  ame ngram [ --version ] [ --help ] [ --n3d3 ] [ --type3dcharacter ] [ --order byfrequency ] [ input files ] ^ description this script produces n-grams tables of the input files to the standard ouput . ^  ame : 3dover  um 3ditem --version ^  ame version . ^ --help prints help . ^ --n3dnumber n-gram size , produces 3-grams by default . ^ --type3dcharacter|byte|word type of n-grams produces . ^ see  ame : :  ame module . ^ --orderbyfrequency by default , the n-grams are ordered lexicographi ound;  har cally . ^ if this option is specified , then they are ordered by frequency in descending order . ^ prerequisites  ame : :  ame ,  ame : :  ame ^ script categories  ame : :  ame ^  ame also  ame : :  ame module . ^  ame  ame  um  ame  ame  ebsite ^ this module is provided ' as is ' without expressed or implied warranty . ^ this is free software ; you can redis ound;  har tribute it and / or modify it under the same terms as  ame itself . ^ the latest version can be found at  ebsite ^ name text : :  ame -  ame  ame analysis ( for characters , words , and more ) ^ synopsis for default character n-gram analysis of string : ^ use  ame : :  ame ; my $ ng3  um  ame : : ngrams-)new ; ng3-)process_text ( ' abcdefg1235678hijklmnop ' ) ; print ng3-)to_string ; ^ one can also feed tokens manually : ^ use  ame : :  ame ; my $ ng3  um  ame : : ngrams-)new ; $ ng3-)feed_tokens ( '  har ' ) ; $ ng3-)feed_tokens ( '  har ' ) ; $ ng3-)feed_tokens ( '  har ' ) ; $ ng3-)feed_tokens ( 'd' ) ; $ ng3-)feed_tokens ( '  har ' ) ; $ ng3-)feed_tokens ( '  har ' ) ; $ ng3-)feed_tokens ( '  har ' ) ; $ ng3-)feed_tokens ( '  har ' ) ; ^ we can choose n-grams of various sizes , e.g. : ^ my $ ng  um  ame : : ngrams-)new ( windowsize  um )  um ) ; ^ or different types of n-grams , e.g. : ^ my $ ng  um  ame : : ngrams-)new ( type  um ) byte ) ; my $ ng  um  ame : : ngrams-)new ( type  um ) word ) ; ^ description this module implement text n-gram analysis , supporting several types of analysis , including character and word  ngrams . ^ the module text : :  ame is very flexible . ^ for example , it allows a user to manually feed a sequence of any tokens . ^ it handles several types of tokens ( character , word ) , and also allows a lot of flexibility in automatic recognition and feed of tokens and the way they are combined in an  har  ame . ^ it counts all n-gram frequencies up to the maximal specified length . ^ the output format is meant to be pretty much human-readable , while also loadable by the module . ^ the module can be used from the command line through the script the ngrams.pl manpage provided with the package . ^ output format the output looks like this : ^ begin output by  ame : :  ame version  um ^ 1-grams ( total count :  miley a  um  har  um  har  um  har  um  har  um  har  um  har  um  har  um ^ 2-grams ( total count :  um ) ab  um bc  um cd  um de  um ef  um fg  um gh  um ^ 3-grams ( total count :  um ) abc  um bcd  um cde  um def  um efg  um fgh  um ^  ame output by  ame : :  ame ^ n-grams are encoded using encode_s (  ebsite can always be recognized as  har . ^ for example , for word  har grams , space is replaced by underscore ( _ ) : ^ begin output by  ame : :  ame version  um ^ 1-grams ( total count :  miley the  um  ame  um  ame  um quick  um ^ 2-grams ( total count :  um )  ame  um brown_fox  um brown_quick  um fox_brown  um quick_fox  um ^  ame output by  ame : :  ame ^ or , in case of byte type of processing : ^ begin output by  ame : :  ame version  um ^ 1-grams ( total count :  um )  har  um  har  um _  um ,  um . ^  um  har  um  har  um  har  um ... etc ^ 2-grams ( total count :  um ) t_  um  ame  um tb  um nt  um __  um _ . ^  um _b  um  har  um  har  um ,  har  um .n  um ..  um  ame  um br  um ck  um  har  um ... etc ^  ame output by  ame : :  ame ^ methods ^ new ( windowsize  um ) pos_integer , type  um ) charac ound;  har ter|byte|word ) ^ my $ ng  um  ame : : ngrams-)new ; my $ ng  um  ame : : ngrams-)new ( windowsize3d)10 ) ; my $ ng  um  ame : : ngrams-)new ( type3d)' word ' ) ; and similar . ^ creates a new ' text : :  ame ' object and returns it . ^  ame : ^ windowsize n-gram size ( i.e. ,  har ' itself ) . ^  ame is  um if not given . ^ it is stored in $ object-){ windowsize } . ^ type specifies a predefined type of n-grams : ^ character ( default )  ame character n-grams :  ame letters , sequences of all other characters are replaced by a space , letters are turned uppercase . ^ byte raw character n-grams : do n't ignore any bytes and do n't pre-process them . ^ word  ame word n-grams :  um token is a word consist ound;  har ing of letters , digits and decimal digit are replaced by ( number ) , and everything else is ignored . ^ a space is inserted when n-grams are formed . ^ one can also modify type , creating its own type , by fine-tuning several parameters ( they can be unde ound;  har fined ) : ^ $ o-){ tokenseparator } - string used to be inserted between tokens in n-gram ( for characters it is empty , and for words it is a space ) . ^ $ o-){ skiprex } - regular expression for ignoring stuff between tokens . ^ $ o-){ tokenrex } - regular expression for recognizing a token . ^ $ o-){ processtoken } - routine for token preprocessing . ^ token is given and returned in $ _ . ^ feed_tokens ( list of tokens ) ^ this function manually supplies tokens . ^ process_text ( list of strings ) ^ process text , i.e. , break each string into tokens and feed them . ^ process_files ( file_names or file_handle_references ) ^ process files , similarly to text . ^ the files are processed line by line , so there should not be any multi-line tokens . ^ to_string ( orderby  um ) frequency ) ^ produce string representation of the n-gram tables . ^ if parameter ' orderyby3d)frequency ' is specified , each table is ordered by decreasing frequency . ^ history and related work this code originated in my ' monkeys and rhinos ' project in  um , and is related to authorship attribution project . ^ some of the similar projects are (  ame can be found at my site ) : ^  ame  ame package in  ame , by  ame  ame at  ame . ^ this is a package that includes a script for word ngrams . ^  ame : :  ame  ame package by  ame  ame this is a similar package for character n-grams . ^ as an xs-implementation it is supposed to be very effi ound;  har cient . ^  ame script ngram.pl by  ame  ame this is a script for analyzing character n-grams . ^  ame  ame  ame language  ame  ame , in c++ by  ame peng a n-gram language modeling package written in c++ . ^ bugs and limitations if a user customizes a type , it is possible that a result ound;  har ing n-gram will be ambiguous . ^ in this way , to different n-grams may be counted as one . ^ with predefined types of n-grams , this should not happen . ^ for example , if a user chooses that a token can contain a space , and uses space as an n-gram separator , then a tri ound;  har  ame like this '  har  har  har  har ' is ambiguous . ^ author  ame  um  ame  ame  ebsite ^ this module is provided ' as is ' without expressed or implied warranty . ^ this is free software ; you can redis ound;  har tribute it and / or modify it under the same terms as  ame itself . ^ the latest version can be found at  ebsite ^  ame also  ame  ame package in  ame , by  ame  ame at  ame . ,  ame  ame  ame language  ame  ame in c++ by  ame  ame ,  ame script ngram.pl by  ame  ame ,  ame  ame 's text : :  ame module in  ame . ^ the links should be available at  ebsite </text_normal></message_body></message>