<message>
<from> edu </from>
<to> org </to>
<content-type> text/plain; charset=us-ascii </content-type>
<subject>
<text_normal> 

^ [ autopackage ] re : libprefix - all the way 
</text_normal>
</subject>
<date> fri, 2 may 2003 10:39:13 -0400 (edt) </date>
<message_body>
<text_normal> 

^ let me put my redundant cents back in here ... 
^ the approach i 've been thumping is that you want a rigid structure locally , but not globally . 
^ that is , package management is mostly concerned about managing discrete " units " called packages , which at least theoretically , should be self-contained and location independent . 
^ the problem is integrating that 'discrete unit " into the operating system . 
^ the traditional unix approach does not even really support this 'discrete unit " , with its files located in varying different places . 
^ but there are many strategies to cope with this ... take stow for example - it enforces 'discrete units " in a seperate , flat directory , but then symlinks the individual components into the larger system . 
^ &name , you could define on a system-by-system basis , the names of the abstract tokens such as " binary dir " , " conf dir " , " lib dir " , etc. i 'm not so sure this is really useful though , as you are still left with having to integrate those directories into the &name at large . 
^ it would probably be a better idea for package authors to keep to a strict local naming structure ( app/ [ &name , &name , &name ] ) , and let the package management system figure out how to take those abstract dirs and map them into the system . 
^ at a certain point , you want to choose standardization over flexibility . 
^ &char for one would not really be happy if every package author renamed all their standard directories something else ... that completely misses the point of coming up with a package management standard to begin with . 
^ &name &name mailing list &email 
</text_normal>
</message_body>
</message>