<message>
<subject>
<text_normal> 

^ re : [ autopackage ] libprefix - all the way 
</text_normal>
</subject>
<from> com </from>
<to> org </to>
<content-type> text/plain </content-type>
<date> 01 may 2003 21:27:22 +0100 </date>
<message_body>
<text_normal> 

^ on &name , &num at &num : &num , &name &name wrote : 
</text_normal>
<text_embedded> 

^ sorry for not replying to the thread , i just subscribed and as such ca n't simply reply to it . 
^ &smiley 
</text_embedded>
<text_normal> 

^ yeah , mailing lists suck do n't they &smiley &num day i 'll figure out how to spamproof a newsgroup . ... 
</text_normal>
<text_embedded> 

^ i 'd think it 'd be worth the effort to go all the way , and provide methods for finding any path using the library , given the same path names that autoconf projects - i.e. , a function for libdir , execdir , prefix , sharedstatedir , sysconfdir , and so on . 
^ the app authors know a lot better than we do which of those directories are important to them . 
</text_embedded>
<text_normal> 

^ well the current &name ( which actually i do n't like so much , feels over complex and too inflexible ) does this . 
^ you can set libdir , sysconfdir etc separately , or if not specified they 'll default to the 'standard " unix &num . 
^ however , i remain to be convinced as to the usefulness of this . 
^ i ca n't think of a reason you 'd want to rearrange the internal directory structure of an application . 
</text_normal>
<text_embedded> 

^ this does of course raise the issue of _how_ to get this ; using /proc can only provide so much information , and even then it would only be a half guess . 
^ just because a binary is in /usr / bin or a lib is in /usr / lib , does n't mean the data wo n't be in /usr / share or /usr / share / app or /usr / local / app , and so on . 
</text_embedded>
<text_normal> 

^ well , the app can use any internal structure it likes of course , but we provide convenience &name for the case when it does follow the usual structure and therefore the locations of things can be worked out from the binary location ( trivially read from /proc / self / exe or for libraries using the addresses in /proc / self / maps ) . 
</text_normal>
<text_embedded> 

^ the global database is a bit weak sounding , i 'll admit - too easy to break . 
</text_embedded>
<text_normal> 

^ yeah . 
^ i 'd rather avoid it too , though i suspect we 'll end up allowing it to be used also . 
</text_normal>
<text_embedded> 

^ i can think of &num options ( there are likely many more ) : 
^ - put in some kind of metadata file , similar to a .desktop file or pkgconfig file , that has this , and apps / libs call a library routine that takes their unique &name to find and read this file . 
</text_embedded>
<text_normal> 

^ this is how it currently works . 
</text_normal>
<text_embedded> 

^ 
^ - embed the data straight in the executable , at install time . 
</text_embedded>
<text_normal> 

^ we did toy with this idea , but abandonded it for the reasons you give below . 
</text_normal>
<text_embedded> 

^ anyways , i really just do n't think that " where is the executable " and " where is the library " will honestly work , unless we enforce that autopackage files must be &name compliant . 
^ the big advantage to a system like this tho is being able to support systems with more intelligent file system hierarchies to be automagically supported , i think . 
</text_embedded>
<text_normal> 

^ well , i do n't personally the gain to be had from this , users should n't be poking around in a programs innards anyway - the abstractions provided by gnome / &name should do the trick nicely . 
^ i 'm not entirely sure i understand what it is you want . . ... if it 's the ability for an app to be toggled between $ prefix / etc or $ prefix / configuration at runtime , well providing an &name for this would n't be too hard but it seems rather pointless to me - at some point you have to draw the line , we ca n't load * everything * from an external file . 
^ i think the real solution is to perfect the dynamic location code ( which does n't exist yet &smiley and then read the database only for overrides , though even that may not make much sense . 
^ the internal structure below the prefix can be still be configured at compile time , if need be . 
^ thanks -mike 
^ &name mailing list &email 
</text_normal>
</message_body>
</message>