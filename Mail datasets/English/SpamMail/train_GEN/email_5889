<message>
<date> mon, 20 jan 2003 17:08:45 +0000 (gmt) </date>
<from> ac.uk </from>
<to> ac.uk </to>
<subject>
<text_normal> 

^ re : [ &name ] isprobableprime primality checking algorithm 
</text_normal>
</subject>
<content-type> text/plain; charset=us-ascii </content-type>
<message_body>
<text_normal> 

^ &name ... 
^ sent it &name some pple wanted to know what algorithm is behind the &name method . 
^ cheers &name &name &name vice-president : &name university &name &name and business association 
^ &name college &name university 
^ &name : &num web : &website 
^ on mon , &num &name &num , &name &name wrote : 
</text_normal>
<text_embedded> 

^ should there have been some code attached to this ? 
^ otherwise , it 's a reasonable enough spec , but is somewhat out of the blue ? 
^ &name 
^ on monday &num &name &num &num : &num , &email wrote : 
<text_embedded> 

^ &name public static boolean &name ( &name &char ) perform a probabilistic primality test to determine if &char is prime . 
^ this method returns true if &char is probable prime and false if it is definitely composite . 
^ the probability of returning true if &char is composite is fixed at &num for this implementation . 
^ this bound is a reasonable choice for most cryptographic operations . 
^ this method can be used as drop-in replacement for the biginteger.isprobableprime ( ) method offering much better performance . 
^ this is achieved by first filtering out number divisable by small primes and then using the &name test with tighter bounds . 
^ this method only works for positive numbers . 
</text_embedded>

^ &name cornish room &name , &name &name &name college , &name &name &name &name : # &num | &name : &email &name : &num &name &name &name &name &name &name &name &name &num 
</text_embedded>
</message_body>
</message>