<message>
<date> tue, 16 jul 2002 09:42:20 -0400 (edt) </date>
<from> edu </from>
<to> edu </to>
<subject>
<text_normal> 

^ re : our table schema specification and other notes ... 
</text_normal>
</subject>
<content-type> text/plain; charset=us-ascii </content-type>
<message_body>
<text_normal> 

^ hi &name , 
^ thanks for your email . 
^ in response to your comments : 
^ &num ) i agree - the port number should probably be part of the identifier representation ( although i have not thought about the evaluate method of the join box yet - right now all evaluate methods take just &num tuple ) . 
^ &num ) if a fraction is given by the user ( like &num / &num ) just keep the &num / &num in the string that is written to the database - we will convert this to a float later . 
^ it is just for the cases like &num that should be a float because it is being added to an attribute that is a float ( which we wo n't know on the server side ) that we would like the &num to be added to make &num . 
^ this way we know to parse it as a float . 
^ &num more question , how are you representing timestamps ? 
^ i want to make sure that we parse them in the right way . 
^ also , i want to make sure that string constants in the database will be surrounded by " quote marks . 
^ is this how you do it ? 
^ &name 
^ on mon , &num &name &num , &name &name wrote : 
</text_normal>
<text_embedded> 

^ basically , i guess we would not have any serous problems with the changes you wanted to make . 
^ however , for the first one , we should have one more component that identifies the input port that the tuples are coming through . 
^ note that we may have binary boxes . 
^ for example , in : &num : &char : &num : &num : the first component &num says that the identifier is an attribute of the composite type assigned to the first input port . 
^ even though we do n't need that thing for unary boxes , i prefer to use the convention even for unary boxes . 
^ otherwise , we should apply different parsing rules depending on the context ( whther the current box is unary or binary ) . 
^ but , it 's a very minor issue . 
^ as for the second suggestion , i wonder if just having constants as users specify would be good enough . 
^ for example , when you are given " price-4 / &num " , what do you think is the ultimate form for the expression ? 
^ do you want to have " : &num : &char : &num : &num : - &num " ? 
^ if you like to have that thing , i should evaluate ( optimize ) sub-expressions whenever they are evaluatable ( e.g. , &num / &num - ) &num - ) &num ) . 
^ if you do n't want it , &num and &num must be still regarded as integers for the result to be &num rather than &num . ... 
^ let me know what you like to have . 
^ thanks , 
^ &name . 
^ on &name , &num &name &num , &name &name wrote : 
<text_embedded> 

^ in writing some pseudocode for the server-side parser , the box group were wondering if some slight modifications could be made to what the &name group writes to the database . 
^ there are &num changes : 
^ &num ) instead of having type information stored in the database separately from the predicate / function string , we were wondering if the predicate / function 'modifier " strings contain this information directly . 
^ in other words , instead of writing " age ) &num " to the database , we would prefer " : &char : &num : &num : ) &num " gets written where &char stands for integer ( &char for float , &char for string etc ) , &num stands for the offset within the tuple string , and &num stands for the size ( number of characters ) of that attribute . 
^ in this way , we do n't have to read from the database more than once ( just to get the original sting ) which would save time when parsing . 
^ &num ) if the type of a constant is a float , we were hoping it would be wriiten to the database string with a decimal point . 
^ thus , if the user wrote " price - &num " it would be written as " : &char : &num : &num : - &num " ( notice the &num added to the &num ) . 
^ please let us know if these changes are possible . 
^ thanks , &name 
</text_embedded>

</text_embedded>
</message_body>
</message>