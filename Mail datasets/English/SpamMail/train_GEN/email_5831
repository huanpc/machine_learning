<message>
<from> com </from>
<subject>
<text_normal> 

^ re : [ autopackage ] libprefix - all the way 
</text_normal>
</subject>
<to> org </to>
<content-type> text/plain </content-type>
<date> thu, 01 may 2003 18:30:27 -0400 </date>
<message_body>
<text_normal> 

^ on &name , &num at &num : &num , &name &name wrote : 
</text_normal>
<text_embedded>

<text_embedded> 

^ again , it 's not so much the sturcture of the app as it is the system you install on . 
^ &char / the some distros , you might have an app with binaries in /usr / bin , data in /usr / share / app , docs in /usr / &name / app , etc. 
^ in a more modern environment , or something next-ish , you 'd have it totally different - /local / &name / for bin , /local / &name / library for libs , etc. 
</text_embedded>

^ installing things into those locations can be abstracted by the autopackage &name certainly . 
^ i suspect that a distro which broke with the &name would n't be too concerned about compatability anyway , so rebuilding the packages with --sysconfdir etc to configure would be easy . 
</text_embedded>
<text_normal> 

^ &name it 'd be nice for 3rd party apps . 
^ 
^, 
^ 
</text_normal>
<text_embedded> 

^ in general , the extra effort associated with deprefixing an app to have those paths also loaded at runtime probably is n't worth it for hypothetical next style distros . 
^ lots of people talk about changing the &name , but i do n't think it 's that bad really - certainly replacing the short unix names with long english names does n't seem much like progress to me i 'm afraid . 
</text_embedded>
<text_normal> 

^ well , just using english does n't help , no. 
^, 
^ there 's a lot more to the restructuring than that . 
^ both &name and linuxstep have documents explaining their file heirarchies , they 're good reads ; &name / hurd also has some documents explaining why the old &name hierarchy is n't so great , but they did n't bother to try to solve it any way . 
^ &smiley 
^ aside from that , providing these features in libprefix should n't be any extra effort . 
^ there 's still the problem that looking up stuff in the /proc system is n't going to work very well anyhow , since at most all you can find is where the binaries are , which tells you very little about the data location . 
^ even _with_ the &name , you have several models ; if you put in /usr / local or /opt , it 's $ prefix / etc and $ prefix / share , etc. if you use /usr as your prefix , you then special case /etc and /var . 
^ a lot of /usr / local stuff special cases /var as well . 
^ also , is the app in /usr / local/ $ app or just /usr / local ? 
^ the binary might be be in /usr / local / bin , but the data in /usr / local/ $ app . 
^ these are all distro / administrator choices , that the app should n't be making . 
^ then get into &name 's, &name , etc. , plus network mounted storage , or stuff installed in $ home ... you 'll never be able to guess anything based on solely where the binary / library is located . 
^ &name saying " it has to be compiled for the distro " rather defeats the whole purpose of autopackage and prefix-independent binaries , no ? 
^ &smiley 
^ so , in solving these issues , it makes sense to just ensure it 's done in a way that fully genericizes ( yay made-up words ) it , so you get the ability to do next-ish stuff ( or anything else ) for free . 
^ 
^, 
^ &name would just specify the preferred paths for installed software for autopackage , users could invent their own hierarchies as they prefer for stuff put in $ home ( for example , i have a ~/apps directory , while others use just ~/ $ appname , others have their own ~/bin and ~/lib , and all that ) . 
^ eh , think i 'm just repeating my point over and over now . 
^ ~, 
^ 
</text_normal>
<text_embedded>

<text_embedded> 

^ it 'd be great to allow a single binary to work in disparate setups like this - it removes the whole need for the &name , mostly , which is good , since the &name is based on &num year old archaic &name layout . 
^ &smiley 
</text_embedded>

^ &name is based on the &num year old &name , if you 're going to chuck out legacy stuff you might as well rewrite the &name , it 's got enough hairs &smiley 
</text_embedded>
<text_normal> 

^ &name . 
^ &name the kernel is a lot different than the original &name , and the &name userspace is fairly different as well . 
^ the file system , tho , has n't changed too much . 
^ especially if you look at the historical reasons for most of the folder names . 
^ ~, 
^ 
^ there 's also issues with how the &name decided to lump everything together in /usr instead of the nice proper way the old &name _used_ to use , but this is the wrong place to argue on that , i 'm sure . 
^ ~, 
^ 
</text_normal>
<text_embedded> 

^ &name mailing list &email &name &name ( &email ) &name productions , inc. 
</text_embedded>
<text_normal> 

^ &name mailing list &email 
</text_normal>
</message_body>
</message>