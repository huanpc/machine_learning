<message>
<date> mon, 20 jan 2003 17:07:07 -0000 </date>
<from> ac.uk </from>
<to> org </to>
<content-type> multipart/mixed </content-type>
<subject>
<text_normal> 

^ [ &name ] minutes2 
</text_normal>
</subject>
<message_body>
<part num="1" type="text/plain">
<text_normal> 

^ hi , 
^ here 's the minutes / agenda for tomorrow . 
^ see you all after lectures at &num , let 's just hang around near the lecture theatre and then go find a seminar room together . 
^ unfortunately we ca n't choose a time for our session with &name &name , it was assigned to us . 
^ so it shall be on wednesday 29th , at &name . 
^ &name
</text_normal>
</part>
<part num="2" type="text/html">
<text_normal> 

^ &name &name &name &name &num &num 2003-01-20t15 : &num : &name 2003-01-20t16 : &num : &name &num &num &num none &num &num &num &num 
^ &char &char &char &char 
^ minutes for &name &num 
^ &num / &num / &num &num : 00pm 
^ &name : all present 
^ topics discussed 
^ issues concerning the &name library two-fold approach for the testing of the bigint &name : comparing against the &name &name multiplying results and checking against original numbers - ) verification . 
^ since the project briefing booklet has not undergone much change since the year &num , there might have been numerous discrepancies in the package ; since then , &name &name package has considerably improved and perhaps most bugs removed ( &name ) 
^ how to show that our arithmetic is being performed correctly given exhaustive proof is not achievable : 
^ &name &name that our program works fine with relatively small primes 
^ b7 use more than &num primality &name 
^ finding all factors write our own primality &name 
^ &name check for small numbers . 
^ if a number is found to be 3fsmall3f , implement factorization locally on server 
^ &name trial division for factors up to &num digits ( &name numbers ) using sieve of &name 
^ &name &name rho for up to &num digits 
^ b7 for large numbers , distribute on network 
^ &name &name &name is perhaps the easiest and most efficient to implement in our range of &name numbers 
^ &name &name latency is very expensive , should take it into account during initial design phase , rather than trying to optimize later on . 
^ &name &name design . 
^ &name extensive modules . 
^ &name 
^ &name &name resource links on our webpage , collecting all reference material that we use 
^ &name &name will document codes as they go along 
^ &name &name requirement specification first as a group , rest of the documentation can be done by &name &name 
^ &name possibly employ &name specification 
^ role delegation 
^ b7 please refer to &name &num organisation chart 
^ to do / agenda for tuesday &name : 
^ b7 are &name rho and quadratic sieve classified as &name ? 
^ &name &name checking methods 
^ &name further study of factorisation algorithms , in particular &name rho , quadratic sieve . 
^ &name &name &name and module design ( meeting with &name &name set for 3pm on wednesday 29th ! ) 
</text_normal>
</part>
</message_body>
</message>