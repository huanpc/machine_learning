<message>
<date> tue, 14 jan 2003 15:23:36 +0000 (gmt) </date>
<from> ac.uk </from>
<to> ac.uk </to>
<subject>
<text_normal> 

^ re : stuck 
</text_normal>
</subject>
<content-type> text/plain; charset=iso-8859-1 </content-type>
<message_body>
<text_normal> 

^ good thinking ! 
^ that would seem to do the job , except we are still allowing &num different representations of the same reading in &num & &num . 
^ however , at least we are not allowing any spurious &num . 
^ only thing is , i 'm not sure whether that would work in the compositional framework that we 've seen so far , because as a determiner , " every " binds only with its determinant &name at the lexical level , not with 
^ the verb . 
^ thus , you ca n't set up that qeq in the same way as you can the 
^ others . 
^ hmmmm. . . 
^ &char 
^ on &num &name &num , &name &name wrote : 
</text_normal>
<text_embedded> 

^ how about h3 qeq l5 saying that the " every " restr must have believe in it 
^ &char 
^ on &name &num &num , &name &name wrote : 
<text_embedded> 

^ as a point of interest ( ? ) you can actually write the first reading in 
^ &num ways : 
^ &num ) every ( &char , &name ( &char ) , believe ( &char , some ( &char , cat ( &char ) , sleep ( &char ) ) ) ) 
^ &num ) every ( &char , &name ( &char ) , some ( &char , cat ( &char ) , believe ( &char , sleep ( &char ) ) ) ) 
^ these &num are equivalent . 
^ now , you ca n't do the same thing for the other reading : 
^ &num ) some ( &char , cat ( &char ) , every ( &char , &name ( &char ) , believe ( &char , sleep ( &char ) ) ) ) 
^ &num ) some ( &char , cat ( &char ) , believe ( &char , every ( &char , &name ( &char ) , sleep ( &char ) ) ) ) 
^ &num is invalid because you ca n't use &char in " believe " before it has been bound in " every " . 
^ now , to avoid our underspecification allowing &num , perhaps we should really have h5 &num l6 rather than h5 qeq h6 . 
^ this would exclude both &num and &num , but since &num is equivalent to &num anyway , perhaps this is ok . 
^ &name , 
^ because of compositionality , i thought we were avoiding &num 's, so perha ps there is a problem here - i ca n't see how you can exclude &num , using only 
^ qeq 's. 
^ &char 
^ on &num &name &num , &name &name wrote : 
<text_embedded> 

^ no this is fine 
^ thanks ! 
^ &name 
^ on &name &num &num , &name &name wrote : 
<text_embedded> 

^ how about : 
^ some ( &char , cat ( &char ) , every ( &char , &name ( &char ) , believe ( &char , sleep ( &char ) ) ) ) 
^ &name : some ( &char , h1 , h2 ) &name : cat ( &char ) &name : every ( &char , h3 , h4 ) &name : &name ( &char ) &name : believe ( &char , h5 ) &name : sleep ( &char ) h1 qeq &name h3 qeq &name h5 qeq l6 
^ hopefully this underspecification allows you to put back the other 
^ reading as well ( with &char and &char switched over though ! ) . 
^ is that an answer to the question , or have i misunderstood ? 
^ &name 
^ on &num &name &num , &name &name wrote : 
^ &char &name ? 
^ il 
^ 2e ) 
^ &char 
^ &char 
^ in to ar an 
^ &char &char &char , &char 
^ ld &char 
^ me &char " 
^ &char 
^ &char ) ve 
^ &char . 
^ a 
^ re 
</text_embedded>

</text_embedded>

</text_embedded>

</text_embedded>
</message_body>
</message>