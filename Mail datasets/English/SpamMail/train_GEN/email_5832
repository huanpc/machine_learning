<message>
<subject>
<text_normal> 

^ re : [ autopackage ] libprefix - all the way 
</text_normal>
</subject>
<from> com </from>
<to> org </to>
<content-type> text/plain </content-type>
<date> 02 may 2003 08:46:54 +0100 </date>
<message_body>
<text_embedded> 

^ aside from that , providing these features in libprefix should n't be any extra effort . 
</text_embedded>
<text_normal> 

^ the main problem is not adding support to libprefix , that is relatively trivial . 
^ the problem is that patching applications to support libprefix is already a pain in the ass , i 'm concerned that attempting to make all the internal directories relocatable would push the effort needed over what most people are willing to do , and they 'd end up breaking the 'must be relocatable " rule . 
^ but i 'm not really sure , only &name has deprefixed an app of any real size ( mplayer ) , the effort needed may be the same anyway . 
</text_normal>
<text_embedded> 

^ there 's still the problem that looking up stuff in the /proc system is n't going to work very well anyhow , since at most all you can find is where the binaries are , which tells you very little about the data location . 
</text_embedded>
<text_normal> 

^ unless you use a database , you have to get your bearings from somewhere . 
^ i think we both agree that a database is less than optimal , so using the binaries / libraries seems like the next best thing . 
</text_normal>
<text_embedded> 

^ even _with_ the &name , you have several models ; if you put in /usr / local or /opt , it 's $ prefix / etc and $ prefix / share , etc. if you use /usr as your prefix , you then special case /etc and /var . 
</text_embedded>
<text_normal> 

^ i think this is more due to the fact that the &name is a steaming pile - my understanding of it has always been that global configuration 
^ * always * goes in /etc , global state always goes in /var , and then user specific config goes into the home directory . 
^ i have &num or &num apps that insist on using /usr / local / etc if i did n't specify differently but i tend to regard them as broken ( indeed , the only &num i can see now is mplayer ! ) . 
</text_normal>
<text_embedded> 

^ a lot of /usr / local stuff special cases /var as well . 
^ also , is the app in /usr / local/ $ app or just /usr / local ? 
^ the binary might be be in /usr / local / bin , but the data in /usr / local/ $ app . 
</text_embedded>
<text_normal> 

^ i 'm pretty sure if the app binary is in /usr / local / bin , then the data should be in /usr / local / share / appname . 
</text_normal>
<text_embedded> 

^ then get into &name 's, &name , etc 
</text_embedded>
<text_normal> 

^ . ... which we have no intention of supporting in autopackage : &char 
</text_normal>
<text_embedded> 

^ . , plus network mounted storage , or stuff installed in $ home ... 
</text_embedded>
<text_normal> 

^ currently installs to ~ /.opt , though i think really it should be ~ /.usr , simply because opt implies appnames as directories below it , whereas usr does n't. 
</text_normal>
<text_embedded> 

^ you 'll never be able to guess anything based on solely where the binary / library is located . 
^ &name saying " it has to be compiled for the distro " rather defeats the whole purpose of autopackage and prefix-independent binaries , no ? 
^ &smiley 
</text_embedded>
<text_normal> 

^ well , true . 
^ given reasonably sane defaults , i still think we can extrapolate libdir , datadir and so on by applying a few simple rules to the location of the binary . 
^ having an &name which allowed you to override these would n't be hard to implement however . 
</text_normal>
<text_embedded> 

^ so , in solving these issues , it makes sense to just ensure it 's done in a way that fully genericizes ( yay made-up words ) it , so you get the ability to do next-ish stuff ( or anything else ) for free . 
^ 
^, 
^ &name would just specify the preferred paths for installed software for autopackage , users could invent their own hierarchies as they prefer for stuff put in $ home ( for example , i have a ~/apps directory , while others use just ~/ $ appname , others have their own ~/bin and ~/lib , and all that ) . 
^ eh , think i 'm just repeating my point over and over now . 
^ ~, 
^ 
</text_embedded>
<text_normal> 

^ yes , i have ~/apps as well , though it 's not something i 'd want to encourage . 
^ i think in future i 'll be moving to ~ /.usr or ~ /.opt ( &char visually prefer the " opt " name but it 's a bit misleading ) to follow what autopackage does by default - users certainly should n't be exposed to the innards of an application , so putting things in a dotdir seems smart . 
^ i guess the only solution is to experiment . 
^ at some point we need to give libprefixdb some loving , drop the 'db " from the name so it becomes just libprefix and then rewrite it to support /proc probes as well as database files and try and make the easiest &name possible . 
^ i 'm pretty sure me and &name are going to be rather busy with other higher priority tasks though for the foreseeable future , certainly until about 
^ &num &num or &num - if somebody wants to have a play with this library before then they 're welcome . 
^ thanks -mike 
^ &name &name ( &email ) &name - &name technology center 
^ &name mailing list &email 
</text_normal>
</message_body>
</message>