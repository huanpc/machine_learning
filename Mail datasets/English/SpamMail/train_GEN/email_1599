<message><date> mon, 10 feb 2003 14:49:19 +0000 </date><to> ac.uk </to><subject><text_normal> ^ making emacs more useful </text_normal></subject><content-type> multipart/mixed </content-type><from> ac.uk </from><message_body><part num="2" type="text/plain"><text_normal> ^ ;  ame 's .emacs file ; ( comments begin with a semi-colon and extend until the end of the ; line ) ^ ;  ame configuration files are actually program scripts . ^  ame is ; configured using a language called " lisp " . ^ the following are chunks ; of lisp instructions . ^ ( delete-selection-mode  har ) ; pressing delete when something ; is highlighted removes it ^ ( setq scroll-step  um ) ; smooth scrolling - when you ; have a large document open and ; you page down , scrolls  um ; line per keypress ( nicer on my ; eyes ) ^ ( global-font-lock-mode  har ) ; you 'll like this one - colour ; the file you are viewing ; according to syntax ( really ; useful - honest ! ) ^ ( setq font-lock-maximum-decoration  har ) ; make the syntax highlighting ; above use as many colours as ; possible ^ ( show-paren-mode  har ) ; highlight  har ; brace / paranthesis / square ; bracket when the cursor hovers ; over the matching one ^ ; ; colour settings ; try m-x list-colours-display to see available  um ( set-background-color 'dark slate gray " ) ( set-foreground-color " white " ) ( set-cursor-color  ame " ) ^ ; change the font to "  ame " - you may find this easier to read ; than the default ( add-to-list 'default-frame-alist " ( font . ^ " -raster-fixedsys-normal-r-normal-normal-12-90-96-96-c- * -iso8859-1 " ) ) ^ ; ; ; ; mostly from  ame 's book " understanding  ame " ; ; ; ; makes  ame editing easier ^ ( defconst my-c-style " ( ( c-basic-offset . ^  um ) ( c-comment-only-line-offset . ^  um ) ( c-hanging-braces-alist . ^ ( ( substatement-open before after ) ) ) ( c-offsets-alist . ^ ( ( topmost-intro . ^  um ) ( topmost-intro-cont . ^  um ) ( substatement . ^ + ) ( substatement-open . ^  um ) ( case-label . ^ + ) ( access-label . ^  um ) ( inclass . ^ + ) ( inline-open . ^  um ) " my  har programming style " ) ^ ( defun my-c-mode-common-hook ( ) ( c-add-style " personal " my-c-style  har ) ( c-set-offset 'member-init-intro " ++ ) ( setq tab-width  miley ; ; ( c-toggle-auto-state nil ) ; automatically insert newlines after ; opening braces or semi-colons . ^ ( c-toggle-hungry-state  har ) ; hungry-delete : say the ; cursor is just before a big ; length of white-space - it ; will delete all the white ; space with  um delete keypress ^ ( define-key c-mode-base-map " c-m " ' newline-and-indent ) ^ ( add-hook " c-mode-common-hook 'my-c-mode-common-hook ) ( add-hook " text-mode-hook " turn-on-auto-fill ) ( add-hook " c-mode-common-hook " turn-on-auto-fill ) ^ ; ; ; ; end from  ame 's book </text_normal></part></message_body></message>