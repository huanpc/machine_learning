<message>
<from> com </from>
<subject>
<text_normal> 

^ re : [ autopackage ] scanning elf 
</text_normal>
</subject>
<to> org </to>
<content-type> text/plain </content-type>
<date> fri, 02 may 2003 19:36:17 -0400 </date>
<message_body>
<text_normal> 

^ on &name , &num at &num : &num , &name &name wrote : 
</text_normal>
<text_embedded>

<text_embedded> 

^ i have this half figured out now ; what looks like needs be done is the &name header of the executable in memory must be scanned to find the symbol table and mappings and all that other fun stuff . 
</text_embedded>

^ what 's happening is that the address is a reference to the objects global offset table . 
^ the &name is n't guaranteed to point to the address in global space of course , it could also point to the procedure linkage table ( &name ) which implements lazy linkage . 
^ we could get the address by ensuring the function is called or getting the &name entry invoked some other way and then dissembling the &name entry but that 's messy and non-portable . 
</text_embedded>
<text_normal> 

^ &name , yes , definitely a lot for me to learn there - i only half understood that , which is sad given my number of years experience . 
^ &smiley 
</text_normal>
<text_embedded>

<text_embedded> 

^ so i 'm thinking i need to spend some time learning &name and object internals before i can get much further on this part of it all . 
^ &smiley 
^ any pointers and where i could read up on the specific issues involved ? 
</text_embedded>

^ &website 
^ &website / 
</text_embedded>
<text_normal> 

^ &name . 
</text_normal>
<text_embedded> 

^ this is all &name anyway , we only care about our own address , not that of other libraries . 
^ once we 've located that , we can find our absolute path in the maps list and the other libraries can sort themselves out . 
^ you can do this to get the base address of the current context object : 
</text_embedded>
<text_normal> 

^ well , i 'm making it so the libraries can sort themselves out - think of a gnome app installed in /usr / local / app , but using a gnome library installed in /opt / gnome - it ca n't use the executable 's prefix ( which i have working now ) , because that would be the wrong one for the library data . 
</text_normal>
<text_embedded> 

^ # include ( dlfcn.h ) 
^ &name dli ; dladdr ( &main, &dli) ; dli.dli_fbase the base address of the object 
^ ... which corresponds to the values in the first column of /proc / self / maps &smiley 
</text_embedded>
<text_normal> 

^ &name , doh , undocumented functions in dlfcn.h . 
^ ~, 
^ 
^ thanks for the pointers , i 'll see what i can get figured out - might not be able to work on this all again until next monday when i 'm back at work . 
^ other responsibilities now . 
^ ( yay for working on too many projects at once . 
^ &smiley 
</text_normal>
<text_embedded> 

^ &name mailing list &email &name &name ( &email ) &name productions , inc. 
</text_embedded>
<text_normal> 

^ &name mailing list &email 
</text_normal>
</message_body>
</message>