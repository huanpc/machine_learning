<message>
<from> com </from>
<subject>
<text_normal> 

^ re : [ autopackage ] libprefix - all the way 
</text_normal>
</subject>
<to> org </to>
<content-type> text/plain </content-type>
<date> fri, 02 may 2003 11:20:28 -0400 </date>
<message_body>
<text_normal> 

^ on &name , &num at &num : &num , &name &name wrote : 
</text_normal>
<text_embedded> 

^ i do n't understand why you think that 's not concrete . 
^ most people never change the defaults , that rules holds true even for computer programmers . 
^ i do n't know many people to change prefix and bindir on an app specific level like you do - &name , getting locations from the binary would break on your setup unless you simply symlinked things from the bin dir ( btw , autopackage can already do this automatically , but &char no longer use that functionality , should test it really ) . 
</text_embedded>
<text_normal> 

^ i have tons of apps from third parties with similarly odd directory structures . 
^ i 've used many distros that had weird layouts . 
^ my own habits came from suggestions from many other people . 
^ the common case might just use ./configure , but then , if everyone was the common case , libprefix would n't be needed . 
^ 
^, 
^ 
</text_normal>
<text_embedded> 

^ i do n't understand . 
^ if i install an app to prefix &char , then presumably any other installation will be overwritten . 
^ if there are &num versions , in prefixes &char and &char , then using binary relative paths wo n't allow them to interfere . 
</text_embedded>
<text_normal> 

^ &name . 
^ but say i install the same app twice , because i 'm a clueless newbie , so i install version &num in /usr / local / and version &num in /usr / local / app-1.1 , and the binary for version &num gets put in /usr / local / bin . 
^ then you look for the data files for the bianry /usr / local / bin / app , you 'd likely first guess /usr / local / share / app / , you 'd find files , but they 'd be for teh version &num app - the user then will be confused as to why the wrong settings / data / whatever is loaded . 
^ sure , the user might have been an idiot , but if we 're going to punish people for being inexperienced we have n't gotten much further along usability-wise . 
^ 
^, 
^ 
</text_normal>
<text_embedded>

<text_embedded> 

^ it could be in /usr / local / appname / share - this is actually how i do my installs , since lumping all the data / files for an app together with other apps is a big huge mistake of &name . 
^ &smiley of course , i put the binaries in /usr / local / bin because of the $ path issues . 
</text_embedded>

^ well , &name , but that 's just wierd &smiley anyway , you could still do this just by making the prefix /usr / local / foo and then symlinking in bin . 
</text_embedded>
<text_normal> 

^ this is actually common &name practice . 
^ &name got lazy and started putting all apps in &num prefix , versus their own , and now most &name do this . 
^ we ca n't just up and change to what we should have kept doing because we do n't have libprefix . 
^ ~, 
^ which was the point of me starting this discussion ; that we have such a lib , it should be complete , and solve the problem completely , and not just the small part of the problem we want to look at . 
^ 
^, 
^ 
^ i still also think autopackage could be tremendously useful to &name , and most of those have proper &name system hierarchies - things get a lot more complicated there ... ( my first time &char / &name was rather enlightening , just seeing where they opted to put the various pieces of something like gnome ) 
</text_normal>
<text_embedded>

<text_embedded> 

^ certain other apps need more special options , since systems like gnome or &name must have certain files in certain prefixes , even if you do n't want the app in that prefix ( this is a failing of gnome / &name ) . 
</text_embedded>

^ &name these days gnome at any rate has environment variables for everything , but settings those for every single app directory is a total pita , which is &num thing in favour of using as few prefixes as possible . 
</text_embedded>
<text_normal> 

^ &name . 
^ unfortunately , even major distros do n't do this . 
^ several put things in /opt / gnome , but then you have gtk and such in /usr , and source-installed apps in /usr / local or /opt / blah , and then you have stuff in $ home , etc. it 's nice to have &num prefix at most . 
^ in reality , we have _way_ too many ... &smiley 
^ those desktop environments need fixing for it , tho - there needs to be a much easier way of using all those multiple prefixes . 
^ but that 's a different problem . 
</text_normal>
<text_embedded>

<text_embedded> 

^ &name could even automatically detect when it needs to put in an override file and when not . 
^ ~, 
^ 
</text_embedded>

^ i 'm not sure what algorithm we 'd use here . 
</text_embedded>
<text_normal> 

^ well , if you 're installing into a common prefix like /usr or /usr / local , no need to over-ride anything . 
^ if the user specifies binaries in /usr / bin , data in /usr / apps / appname , and libraries in /usr / lib / appname ( yes , a contrived example ) , autopacakge could see the default relative paths wo n't work , and write out the over-ride file . 
</text_normal>
<text_embedded>

<text_embedded> 

^ i 've seen the debate both ways ; one of the more compelling i 've seen for having app dirs visible is backups . 
^ a lot of users want to backup settings from an app to a &name or &name disk or something , and it needs to be visible for them to do so . 
</text_embedded>

^ i 'd counter that : 
^ &char ) this does n't apply to program files as user data is always stored in $ home 
</text_embedded>
<text_normal> 

^ &name . 
^ but average users need to be able to see the data to back it up . 
^ &name in accounting or whatever is n't going to know about " ~ /.usr / blah " this is going to ask how to backup or transfer something to her laptop or home machine , and &char want to be able to give her discussions 
</text_normal>
<text_embedded> 

^ &char ) users screw things up far more often by playing with the contents of application install locations in my experience ( or often by deleting them because the uninstaller broke or it took less effort or whatever ) . 
</text_embedded>
<text_normal> 

^ this i 'll agree with . 
^ 
^, 
^ 
</text_normal>
<text_embedded> 

^ &char ) we need a better system for backups than spamming the users home directory with lots of visible data files . 
^ this is &num thing that pisses me off about evolution , when i asked dobey about it he said it was so people could more easily make backups . 
^ some kind of system backup service ? 
^ have a list of applications with check boxes and a " backup state " button that produces a " littlegreen on the 2nd may 2003.backup " file ( really just an archive with system settings / data dirs in ) . 
^ that would work better than exposing the mechanism behind the software magic to users . 
^ i good little project for somebody , along with some work at &website , very nice . 
</text_embedded>
<text_normal> 

^ &name . 
^ the problem has several points . 
^ arguing about the pros / cons of it probably does n't belong here tho . 
^ &char nice backup app would be killer tho ... 
</text_normal>
<text_embedded>

<text_embedded> 

^ i 'm also coming from a desktop perspective , so ~/apps would n't even be " visible " to a user unless they 're advanced enough to open a terminal and do work - and i can tell you now maybe &num of the ~100 employees here could do that with any success . 
^ 
^, 
^ 
</text_embedded>

^ i ca n't say i like the idea of magic directories that appear from the terminal but not nautilus / file picker . 
^ that approach is doomed to bizarre leaks and inconsistancy . 
^ &name already has a decent semantic for hidden files in the form of the dot prefix , no need to special case &name for this , ~ /.usr would do just as well . 
</text_embedded>
<text_normal> 

^ well , see , user 's would n't ever look in ~ / - they 'd only see their desktop folder ( ~/desktop or whatever ) , their documents folder , etc. then heck , it would n't matter if we had an archaic unix fhs . 
^ ~, 
^ if the desktop environments all moved so desktop $ home , then yes , this would be a problem , and a dot directory would likely be better . 
</text_normal>
<text_embedded>

<text_embedded> 

^ &name . 
^ i 'm a bit &name to volunteer ; everytime i do that i end up not having the time . 
^ ~, 
^ i might play around with this with some of my projects tho , and if not provide code at least provide some details . 
^ i have both &name and &name systems ( and soon &name &char if i 'm lucky ) so i 'll be able to play with disparate environments . 
^ 
^, 
^ 
</text_embedded>

^ ok . 
^ &name is n't a major concern for me , although it 'd be nice for libprefix to support whatever the layout of /proc is there , and macos i does n't concern me in the slightest , indeed , i probably would n't especially want support in there , the code bloat would n't be worth it . 
^ any information / code snippets you can provide would be useful though . 
^ the job is pretty trivial , but my &char skills are n't solid enough yet for me to do it quickly ( will be improving soon though ) . 
</text_embedded>
<text_normal> 

^ well , the code should be very easily portable . 
^ the /proc stuff , no , but then , i 've already stated how i see that as a " if it 's possible , use it , but do n't ever dare depend on it " situation . 
^ ~, 
^ 
^ i 'm also a huge portability freak , so i ca n't help but think of multi-platform functionality . 
^ i _hate_ vendor lockin ... &smiley 
</text_normal>
<text_embedded> 

^ thanks -mike the pain of war cannot exceed the woe of aftermath . 
^ - - led &name , " battle of &name " 
</text_embedded>
<text_normal> 

^ &name mailing list &email 
</text_normal>
</message_body>
</message>